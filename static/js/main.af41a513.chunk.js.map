{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","name","job","onClick","removeCharacter","Table","console","log","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","App","characters","filter","character","i","className","ReactDOM","render","document","getElementById"],"mappings":"8NAGMA,EAAc,WAChB,OACI,gCACI,+BACI,sCACA,qCACA,8CAMVC,EAAY,SAACC,GAWf,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACvC,OACI,+BACI,6BAAKD,EAAIE,OACT,6BAAKF,EAAIG,MACT,6BACI,wBAAQC,QAAS,kBAAMR,EAAMS,gBAAgBJ,IAA7C,wBAJCA,MAWjB,OACI,gCAAQJ,KAgBDS,EAXD,SAACV,GAAW,IACdE,EAAmCF,EAAnCE,cAAeO,EAAoBT,EAApBS,gBAEvB,OADAE,QAAQC,IAAIV,GAER,kCACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAWA,cAAeA,EAAeO,gBAAiBA,Q,OCCvDI,E,4MA/CXC,aAAe,CACXR,KAAM,GACNC,IAAK,I,EAGTQ,MAAQ,EAAKD,a,EAEbE,aAAe,SAACC,GAAW,IAAD,EACEA,EAAMC,OAAtBZ,EADc,EACdA,KAAMa,EADQ,EACRA,MAEd,EAAKC,SAAL,eACKd,EAAOa,K,EAKhBE,WAAa,WACT,EAAKrB,MAAMsB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,uDAGb,IAAD,EAEiBS,KAAKR,MAAnBT,EAFH,EAEGA,KAAMC,EAFT,EAESA,IAEd,OACI,iCACI,uBAAOiB,QAAQ,OAAf,kBACA,uBACIC,KAAK,OACLnB,KAAK,OACLoB,GAAG,OACHP,MAAOb,EACPqB,SAAUJ,KAAKP,eACnB,uBAAOQ,QAAQ,MAAf,iBACA,uBACIC,KAAK,OACLnB,KAAK,MACLoB,GAAG,MACHP,MAAOZ,EACPoB,SAAUJ,KAAKP,eACnB,uBAAOS,KAAK,SAASN,MAAM,SAASX,QAASe,KAAKF,oB,GA3C/CO,aCgCJC,EA/Bf,4MAEId,MAAQ,CACJe,WAAY,IAHpB,EAMIrB,gBAAkB,SAACJ,GAAW,IAClByB,EAAe,EAAKf,MAApBe,WAER,EAAKV,SAAS,CACVU,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACtC,OAAOA,IAAM5B,QAX7B,EAgBIiB,aAAe,SAACU,GACZ,EAAKZ,SAAS,CAAEU,WAAW,GAAD,mBAAM,EAAKf,MAAMe,YAAjB,CAA6BE,OAjB/D,uDAoBc,IACEF,EAAeP,KAAKR,MAApBe,WACR,OACI,sBAAKI,UAAU,YAAf,UACI,cAAC,EAAD,CAAOhC,cAAe4B,EAAYrB,gBAAiBc,KAAKd,kBACxD,cAAC,EAAD,CAAMa,aAAcC,KAAKD,sBAzBzC,GAAyBM,aCIzBO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.af41a513.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst TableHeader = () => {\n    return (\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Job</th>\n                <th>Remove</th>\n            </tr>\n        </thead>\n    )\n}\n\nconst TableBody = (props) => {\n    /*\n    return (\n        // Note the / we gave here at the end\n        // If its html element, then we will be giving like so, <tbody></tbody>\n        // Note below, we just gave like <tbody />\n        // Because this is not html, its JSX\n        <tbody />\n    )\n    */\n\n    const rows = props.characterData.map((row, index) => {\n        return (\n            <tr key={index}>\n                <td>{row.name}</td>\n                <td>{row.job}</td>\n                <td>\n                    <button onClick={() => props.removeCharacter(index)} >Delete</button>\n                </td>\n            </tr>\n        )\n    })\n\n    // In above method, we processed \n    return (\n        <tbody>{rows}</tbody>\n    );\n\n}\n\nconst Table = (props) => {\n    const { characterData, removeCharacter } = props;\n    console.log(characterData);\n    return (\n        <table>\n            <TableHeader />\n            <TableBody characterData={characterData} removeCharacter={removeCharacter} />\n        </table>\n    )\n}\n\nexport default Table","import React, { Component } from 'react';\n\n\nclass Form extends Component {\n\n    initialState = {\n        name: '',\n        job: '',\n    }\n\n    state = this.initialState;\n\n    handleChange = (event) => {\n        const { name, value } = event.target;\n\n        this.setState({\n            [name]: value,\n            // Setting the name field of our state\n        })\n    }\n\n    submitForm = () => {\n        this.props.handleSubmit(this.state)\n        this.setState(this.initialState)\n    }\n\n    render() {\n\n        const { name, job } = this.state;\n\n        return (\n            <form>\n                <label htmlFor=\"name\">Name</label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    id=\"name\"\n                    value={name}\n                    onChange={this.handleChange} />\n                <label htmlFor=\"job\">Job</label>\n                <input\n                    type=\"text\"\n                    name=\"job\"\n                    id=\"job\"\n                    value={job}\n                    onChange={this.handleChange} />\n                <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n            </form>\n        );\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\n\nexport class App extends Component {\n\n    state = {\n        characters: [],\n    }\n\n    removeCharacter = (index) => {\n        const { characters } = this.state\n\n        this.setState({\n            characters: characters.filter((character, i) => {\n                return i !== index\n            }),\n        })\n    }\n\n    handleSubmit = (character) => {\n        this.setState({ characters: [...this.state.characters, character] })\n    }\n\n    render() {\n        const { characters } = this.state;\n        return (\n            <div className=\"container\">\n                <Table characterData={characters} removeCharacter={this.removeCharacter} />\n                <Form handleSubmit={this.handleSubmit} />\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}